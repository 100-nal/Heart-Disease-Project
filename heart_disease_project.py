# -*- coding: utf-8 -*-
"""Heart Disease Project

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1C51JgG_zea8wQkVUGh-bjj7aKN_eBW2U
"""

import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv("heart.csv")

"""Dataset Information:

age

sex

chest pain type (4 values)

resting blood pressure

serum cholestoral in mg/dl

fasting blood sugar > 120 mg/dl

resting electrocardiographic results (values 0,1,2)

maximum heart rate achieved

exercise induced angina

oldpeak = ST depression induced by exercise relative to rest

the slope of the peak exercise ST segment

number of major vessels (0-3) colored by flourosopy

thal: 0 = normal; 1 = fixed defect; 2 = reversable defect

The names and social security numbers of the patients were recently removed
 from the database, replaced with dummy values.

"""

df.head(10)

df = df.rename(columns={"cp": "chestpain", "fbs": "fasting_blood_sugar"})

df.shape

df.info()

df.isnull().sum()

"""### EDA"""

pd.set_option("display.float_format", lambda x: "%3f" %x)
df.describe().transpose()

# Calculate the correlation matrix
correlation_matrix = df.corr()

# Create a heatmap
plt.figure(figsize=(10, 6))  # Set the figure size
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', vmin=-1, vmax=1)

plt.title('Correlation Matrix Heatmap')  # Set the title
plt.show()

"""### Checking for duplicates"""

df.duplicated().sum()

df.shape

df = df.drop_duplicates()

df["age"].value_counts().plot(kind= "bar")

df["age"].unique()

# Define the age bins and labels
bins = [0, 18, 30, 40, 50, 60, 70, 80]
labels = ['0-18', '19-30', '31-40', '41-50', '51-60', '61-70', '71-80']

# Use pd.cut() to create age groups
df["age_groups"] = pd.cut(df["age"], bins=bins, labels=labels, right=False)

df["age_groups"].value_counts().plot(kind= "bar")

pd.get_dummies(df["age_groups"])

"""### Here
### 1 is unhealthy heart &
### 0 is healthy heart
"""

df["target"].value_counts(normalize = True)*100

df["target"].value_counts(normalize = True).plot(kind = "bar")

df.groupby("sex").mean()

df["sex_cat"] = df["sex"].replace([0,1],["female","male"])

df.groupby("sex_cat")["target"].mean()

"""catplot is used for categorical variables or columns"""

sns.catplot(data = df, y = "target", x = "sex_cat", kind = "bar")

"""Analysis based on gender and age"""

g = sns.FacetGrid(df,row = "sex_cat", col = "age_groups")
g.map(sns.histplot,"target")

g = sns.FacetGrid(df,hue= "target", col = "age_groups", height = 5)
g.map(sns.scatterplot,"trestbps","chol")

fig,ax = plt.subplots(figsize = (15,10))
sns.boxplot(data = df, x = "age_groups", y = "chol", ax = ax)

c = ["red","green","yellow","purple","blue","orange","cyan"]
df.corrwith(df["target"]).plot.bar(figsize = (20,10), title = "Correlation with target", fontsize = 15, rot = 45, grid = True, color = c)

sns.pairplot(df, hue='target')

"""### Machine Learning Algorithm"""

df["target"].value_counts(normalize=True)

X = df.drop(columns = ["target"], axis = 1)
Y = df["target"]

X = X.drop(columns = ["age_groups"], axis = 1)
X = X.drop(columns = ["sex_cat"], axis = 1)

X

Y

"""Spliting the dataset into training and testing"""

X_train, X_test, Y_train, Y_test = train_test_split(X, Y, test_size=0.2, stratify=Y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

from sklearn.preprocessing import StandardScaler
sc_train = StandardScaler().fit(X_train)
X_train_sc = sc_train.transform(X_train)

from sklearn.preprocessing import StandardScaler
sc_test = StandardScaler().fit(X_test)
X_test_sc = sc_test.transform(X_test)

"""### Training the model

#### Here because it is a binary based model, we are using a logisticregression model
"""

model_lr = LogisticRegression(solver = "liblinear")

model_lr.fit(X_train_sc, Y_train)

model = LogisticRegression()
# training the LogisticRegression model with Training data
model.fit(X_train, Y_train)

"""### Model Evaluation through accuracy"""

# accuracy on training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, Y_train)

print('Accuracy on Training data : ', training_data_accuracy)

# accuracy on test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, Y_test)

print('Accuracy on Test data : ', test_data_accuracy)

results = model_lr.score(X_train_sc, Y_train)
print(results)

results = model_lr.score(X_test_sc, Y_test)
print(results)